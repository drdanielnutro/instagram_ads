{
  "metadata": {
    "schema_version": "2.0.0",
    "plan_file": "plano_validacao_json_v2.md",
    "repository_path": "/Users/institutorecriare/VSCodeProjects/instagram_ads",
    "execution_timestamp": "2025-10-04T17:00:00-03:00",
    "validator_version": "plan-code-drift-validator-v1.0",
    "creation_registry": {
      "size": 26,
      "sample_elements": [
        "app/schemas/final_delivery.py",
        "app/validators/final_delivery_validator.py",
        "app/agents/gating.py",
        "FinalDeliveryValidatorAgent",
        "RunIfPassed",
        "build_execution_pipeline"
      ]
    },
    "analysis_phases_completed": [
      "Phase 1.5: Creation Registry Build",
      "Phase 2: Claim Extraction & Classification",
      "Phase 3: Code Indexing",
      "Phase 4-5: Hierarchical Matching & Semantic Validation",
      "Phase 6-7: Chain-of-Verification & Final Classification Review",
      "Phase 8: Synthesis & Reporting"
    ]
  },
  "summary": {
    "total_claims_extracted": 20,
    "total_claims_validated": 20,
    "validation_coverage": "100%",
    "total_findings": 4,
    "findings_by_severity": {
      "P0_critical_blockers": 4,
      "P1_high_priority": 0,
      "P2_medium_attention": 0,
      "P3_low_improvements": 0,
      "P3_extended": 0
    },
    "blast_radius": "MÉDIO - Afeta criação de schemas (Fase 1) e validador (Fase 2)",
    "overall_status": "REQUIRES_CORRECTION",
    "metrics": {
      "symbol_coverage": "100%",
      "phantom_links_rate": "20%",
      "matching_precision": "80%",
      "validation_time_ms": 450
    }
  },
  "findings": [
    {
      "id": "F001",
      "severity": "P0",
      "classification": "P0-A",
      "category": "dependency_absent",
      "claim": {
        "element": "AspectRatio",
        "type": "DEPENDÊNCIA",
        "context": "Enum importado de app/format_specifications.py",
        "plan_line_refs": ["100", "149"],
        "expected_signature": "enum AspectRatio(str, Enum) com valores: 9:16, 1:1, 4:5, 16:9",
        "expected_location": "app/format_specifications.py",
        "in_creation_registry": false
      },
      "code_evidence": {
        "match_status": "NOT_FOUND",
        "searched_locations": [
          "app/format_specifications.py",
          "app/config.py",
          "app/agent.py"
        ],
        "actual_definition": null,
        "alternative_found": {
          "type": "Literal",
          "location": "app/agent.py:72",
          "definition": "Literal['9:16', '1:1', '4:5', '16:9']",
          "context": "class AdVisual(BaseModel)"
        },
        "fuzzy_candidates": []
      },
      "impact": {
        "description": "BLOQUEADOR - Schema StrictAdVisual não pode importar AspectRatio de format_specifications.py",
        "affected_phases": ["Fase 1.1 - Schema de Validação", "Fase 2.1 - FinalDeliveryValidatorAgent"],
        "chain_blocked": [
          "StrictAdVisual schema creation",
          "FinalDeliveryValidatorAgent validation logic"
        ]
      },
      "suggested_action": {
        "type": "CREATE_TASK",
        "priority": "ALTA",
        "title": "Criar enum AspectRatio em format_specifications.py",
        "description": "Criar enum AspectRatio como pré-requisito para schema StrictAdVisual",
        "acceptance_criteria": [
          "Criar `class AspectRatio(str, Enum)` em app/format_specifications.py",
          "Definir valores: REELS='9:16', SQUARE='1:1', PORTRAIT='4:5', LANDSCAPE='16:9'",
          "Adicionar AspectRatio ao __all__ para exportação",
          "Opcionalmente atualizar AdVisual em agent.py:72 para usar enum",
          "Garantir compatibilidade com Literal existente"
        ],
        "code_example": "class AspectRatio(str, Enum):\n    REELS = '9:16'\n    SQUARE = '1:1'\n    PORTRAIT = '4:5'\n    LANDSCAPE = '16:9'"
      }
    },
    {
      "id": "F002",
      "severity": "P0",
      "classification": "P0-A",
      "category": "dependency_absent",
      "claim": {
        "element": "CTAInstagram",
        "type": "DEPENDÊNCIA",
        "context": "Enum importado de app/format_specifications.py",
        "plan_line_refs": ["82", "115", "149"],
        "expected_signature": "enum CTAInstagram(str, Enum) com CTAs válidos do Instagram",
        "expected_location": "app/format_specifications.py",
        "in_creation_registry": false
      },
      "code_evidence": {
        "match_status": "NOT_FOUND",
        "searched_locations": [
          "app/format_specifications.py",
          "app/config.py"
        ],
        "actual_definition": null,
        "alternative_found": {
          "type": "Literal",
          "location": "app/agent.py:81",
          "definition": "Literal['Saiba mais', 'Enviar mensagem', 'Ligar', 'Comprar agora', 'Cadastre-se']",
          "context": "class AdItem(BaseModel)"
        },
        "fuzzy_candidates": []
      },
      "impact": {
        "description": "BLOQUEADOR - Schema StrictAdItem não pode importar CTAInstagram",
        "affected_phases": ["Fase 1.1 - Schema de Validação", "Fase 2.1 - Validador", "Fase 4.1 - Testes Unitários"],
        "chain_blocked": [
          "StrictAdItem schema creation",
          "CTA validation logic in FinalDeliveryValidatorAgent",
          "Unit tests expecting CTAInstagram enum"
        ]
      },
      "suggested_action": {
        "type": "CREATE_TASK",
        "priority": "ALTA",
        "title": "Criar enum CTAInstagram em format_specifications.py",
        "description": "Criar enum CTAInstagram com todos os CTAs válidos do Instagram Ads",
        "acceptance_criteria": [
          "Criar `class CTAInstagram(str, Enum)` em app/format_specifications.py",
          "Incluir valores: LEARN_MORE='Saiba mais', SEND_MESSAGE='Enviar mensagem', CALL='Ligar', SHOP_NOW='Comprar agora', SIGN_UP='Cadastre-se'",
          "Adicionar BOOK_NOW='Agendar' conforme mencionado em testes (linha 1692 do plano)",
          "Exportar em __all__",
          "Documentar valores válidos"
        ],
        "code_example": "class CTAInstagram(str, Enum):\n    LEARN_MORE = 'Saiba mais'\n    SEND_MESSAGE = 'Enviar mensagem'\n    CALL = 'Ligar'\n    SHOP_NOW = 'Comprar agora'\n    SIGN_UP = 'Cadastre-se'\n    BOOK_NOW = 'Agendar'"
      }
    },
    {
      "id": "F003",
      "severity": "P0",
      "classification": "P0-A",
      "category": "dependency_absent",
      "claim": {
        "element": "MIN_HEADLINE_LENGTH, MAX_HEADLINE_LENGTH",
        "type": "DEPENDÊNCIA",
        "context": "Constantes numéricas de app/config.py",
        "plan_line_refs": ["83", "150"],
        "expected_signature": "Constantes int em classe DevelopmentConfiguration",
        "expected_location": "app/config.py",
        "in_creation_registry": false
      },
      "code_evidence": {
        "match_status": "NOT_FOUND",
        "searched_locations": [
          "app/config.py (classe DevelopmentConfiguration)"
        ],
        "actual_definition": null,
        "alternative_found": {
          "type": "dict_field",
          "location": "app/format_specifications.py:FORMAT_SPECS",
          "definition": "headline_max_chars per format (40 for Reels/Stories, 60 for Feed)",
          "context": "FORMAT_SPECS dictionary"
        },
        "fuzzy_candidates": []
      },
      "impact": {
        "description": "BLOQUEADOR - Schema StrictAdCopy não pode importar constantes de validação",
        "affected_phases": ["Fase 1.1 - Schema StrictAdCopy"],
        "chain_blocked": [
          "StrictAdCopy schema linha 88 - Field validation"
        ]
      },
      "suggested_action": {
        "type": "CREATE_OR_UPDATE_PLAN",
        "priority": "ALTA",
        "title": "Adicionar constantes de headline OU atualizar plano",
        "description": "Resolver dependência de constantes de headline",
        "options": [
          {
            "option": "A",
            "description": "Adicionar constantes a config.py",
            "acceptance_criteria": [
              "Adicionar `min_headline_length: int = 1` à classe DevelopmentConfiguration",
              "Adicionar `max_headline_length: int = 60` (máximo entre formatos)",
              "Documentar que valores específicos por formato estão em FORMAT_SPECS"
            ],
            "code_example": "@dataclass\nclass DevelopmentConfiguration:\n    ...\n    min_headline_length: int = 1\n    max_headline_length: int = 60"
          },
          {
            "option": "B",
            "description": "Atualizar plano para não usar constantes",
            "acceptance_criteria": [
              "Modificar schema para usar valores hardcoded: min_length=1, max_length=60",
              "Remover import de MIN_HEADLINE_LENGTH/MAX_HEADLINE_LENGTH do plano",
              "Documentar que validação dinâmica por formato usa FORMAT_SPECS"
            ],
            "code_example": "class StrictAdCopy(BaseModel):\n    headline: str = Field(..., min_length=1, max_length=60)"
          }
        ],
        "recommended_option": "A"
      }
    },
    {
      "id": "F004",
      "severity": "P0",
      "classification": "P0-A",
      "category": "dependency_absent",
      "claim": {
        "element": "CTA_BY_OBJECTIVE",
        "type": "DEPENDÊNCIA",
        "context": "Mapa de objetivos para CTAs válidos",
        "plan_line_refs": ["461", "519", "589"],
        "expected_signature": "Dict[str, List[str]] mapeando objetivos a CTAs",
        "expected_location": "app/config.py ou app/format_specifications.py",
        "in_creation_registry": false
      },
      "code_evidence": {
        "match_status": "NOT_FOUND",
        "searched_locations": [
          "app/config.py",
          "app/format_specifications.py"
        ],
        "actual_definition": null,
        "alternative_found": {
          "type": "nested_dict",
          "location": "app/format_specifications.py:FORMAT_SPECS",
          "definition": "cta_preferencial per format and objective",
          "context": "FORMAT_SPECS[formato]['strategy']['cta_preferencial'][objetivo]"
        },
        "fuzzy_candidates": []
      },
      "impact": {
        "description": "BLOQUEADOR - FinalDeliveryValidatorAgent não pode validar CTA vs objetivo",
        "affected_phases": ["Fase 2.1 - FinalDeliveryValidatorAgent linhas 516-522"],
        "chain_blocked": [
          "CTA validation logic in validator",
          "Unit tests expecting CTA/objective validation"
        ]
      },
      "suggested_action": {
        "type": "CREATE_TASK",
        "priority": "ALTA",
        "title": "Criar CTA_BY_OBJECTIVE em format_specifications.py",
        "description": "Criar mapa consolidado de objetivos para CTAs válidos",
        "acceptance_criteria": [
          "Definir `CTA_BY_OBJECTIVE: Dict[str, List[str]]` em format_specifications.py",
          "Consolidar valores de `cta_preferencial` de FORMAT_SPECS",
          "Mapear: agendamentos → [SEND_MESSAGE, CALL, BOOK_NOW]",
          "Mapear: leads → [SIGN_UP, LEARN_MORE, SEND_MESSAGE]",
          "Mapear: vendas → [SHOP_NOW, LEARN_MORE]",
          "Usar valores do enum CTAInstagram (após F002 resolvido)",
          "Exportar em __all__"
        ],
        "code_example": "CTA_BY_OBJECTIVE: Dict[str, List[str]] = {\n    'agendamentos': [CTAInstagram.SEND_MESSAGE.value, CTAInstagram.CALL.value],\n    'leads': [CTAInstagram.SIGN_UP.value, CTAInstagram.LEARN_MORE.value],\n    'vendas': [CTAInstagram.SHOP_NOW.value, CTAInstagram.LEARN_MORE.value]\n}"
      }
    }
  ],
  "plan_code_mapping": [
    {
      "plan_element": "app/agent.py:1029",
      "code_element": "final_assembler = LlmAgent(...)",
      "status": "EXISTS",
      "match_type": "exact",
      "location": "app/agent.py:1029",
      "notes": "LlmAgent confirmado, será modificado (prompt) na Fase 3.2.2"
    },
    {
      "plan_element": "app/agent.py:310",
      "code_element": "class ImageAssetsAgent(BaseAgent)",
      "status": "EXISTS",
      "match_type": "exact",
      "location": "app/agent.py:310",
      "notes": "Classe confirmada, será modificada na Fase 3.5"
    },
    {
      "plan_element": "app/agent.py:1261-1274",
      "code_element": "execution_pipeline = SequentialAgent(...)",
      "status": "EXISTS",
      "match_type": "exact",
      "location": "app/agent.py:1261-1274",
      "notes": "Pipeline confirmado, será reorquestrado na Fase 3.1"
    },
    {
      "plan_element": "app/agent.py:67,76",
      "code_element": "AdVisual (67), AdItem (76)",
      "status": "EXISTS",
      "match_type": "exact",
      "location": "app/agent.py:67,76",
      "notes": "Classes BaseModel confirmadas, podem ser extraídas para módulo compartilhado"
    },
    {
      "plan_element": "app/agent.py:54",
      "code_element": "class Feedback(BaseModel)",
      "status": "EXISTS",
      "match_type": "exact",
      "location": "app/agent.py:54",
      "notes": "Schema reutilizável para semantic_visual_reviewer (Fase 3.3)"
    },
    {
      "plan_element": "app/format_specifications.py",
      "code_element": "FORMAT_SPECS dict",
      "status": "EXISTS_PARTIAL",
      "match_type": "exact",
      "location": "app/format_specifications.py",
      "notes": "Arquivo existe com FORMAT_SPECS, mas faltam enums AspectRatio, CTAInstagram e CTA_BY_OBJECTIVE"
    },
    {
      "plan_element": "app/callbacks/collect_code_snippets.py",
      "code_element": "collect_code_snippets_callback function",
      "status": "LOCATION_MISMATCH",
      "match_type": "alternative_location",
      "location": "app/agent.py:122",
      "notes": "ATENÇÃO: Callback existe mas em agent.py:122, não em arquivo separado callbacks/collect_code_snippets.py"
    },
    {
      "plan_element": "app/agents/storybrand_gate.py",
      "code_element": "class StoryBrandQualityGate(BaseAgent)",
      "status": "EXISTS",
      "match_type": "exact",
      "location": "app/agents/storybrand_gate.py:39",
      "notes": "Agente confirmado, preenche storybrand_fallback_meta conforme Fase 1.3"
    },
    {
      "plan_element": "app/callbacks/persist_outputs.py",
      "code_element": "persist_final_delivery function",
      "status": "EXISTS",
      "match_type": "exact",
      "location": "app/callbacks/persist_outputs.py",
      "notes": "Callback confirmado, pode ser estendido com parâmetro attach_images (Fase 3.4)"
    },
    {
      "plan_element": "app/config.py",
      "code_element": "class DevelopmentConfiguration",
      "status": "EXISTS",
      "match_type": "exact",
      "location": "app/config.py:23",
      "notes": "Config class confirmada, será estendida com feature flag (Fase 1.5)"
    }
  ],
  "extended_validations": {
    "enums": [
      {
        "name": "AspectRatio",
        "status": "MISSING",
        "expected_values": ["9:16", "1:1", "4:5", "16:9"],
        "actual_values": null,
        "divergence": "Enum não existe, apenas Literal em AdVisual"
      },
      {
        "name": "CTAInstagram",
        "status": "MISSING",
        "expected_values": ["Saiba mais", "Enviar mensagem", "Ligar", "Comprar agora", "Cadastre-se", "Agendar"],
        "actual_values": null,
        "divergence": "Enum não existe, apenas Literal em AdItem"
      }
    ],
    "constants": [
      {
        "name": "MIN_HEADLINE_LENGTH",
        "status": "MISSING",
        "expected_value": 1,
        "actual_value": null,
        "location": "app/config.py"
      },
      {
        "name": "MAX_HEADLINE_LENGTH",
        "status": "MISSING",
        "expected_value": 60,
        "actual_value": null,
        "location": "app/config.py"
      }
    ],
    "mappings": [
      {
        "name": "CTA_BY_OBJECTIVE",
        "status": "MISSING",
        "expected_type": "Dict[str, List[str]]",
        "actual_value": null,
        "alternative": "FORMAT_SPECS[formato]['strategy']['cta_preferencial']"
      }
    ]
  },
  "uncertainties": [],
  "creation_registry_sample": {
    "total_elements": 26,
    "files": [
      "app/schemas/final_delivery.py",
      "app/utils/audit.py",
      "app/validators/final_delivery_validator.py",
      "app/agents/gating.py",
      "app/agents/assembly_guards.py",
      "app/agents/persistence.py",
      "tests/unit/validators/test_final_delivery_validator.py",
      "tests/integration/test_deterministic_pipeline.py",
      "docs/rollout_deterministic_validation.md"
    ],
    "classes": [
      "FinalDeliveryValidatorAgent",
      "RunIfPassed",
      "ResetDeterministicValidationState",
      "FinalAssemblyGuardPre",
      "FinalAssemblyNormalizer",
      "PersistFinalDeliveryAgent",
      "StrictAdCopy",
      "StrictAdVisual",
      "StrictAdItem"
    ],
    "functions": [
      "build_execution_pipeline",
      "append_delivery_audit_event"
    ],
    "agents": [
      "semantic_visual_reviewer",
      "semantic_fix_agent"
    ]
  },
  "anti_contradiction_check": {
    "status": "PASS",
    "conflicts_found": 0,
    "notes": "Nenhum elemento encontrado simultaneamente em Creation Registry e P0 findings",
    "verified_at": "Phase 7 - Final Classification Review"
  },
  "recommendations": [
    {
      "priority": "CRÍTICA",
      "action": "Resolver todos os 4 bloqueadores P0 antes de iniciar implementação",
      "details": "Criar enums AspectRatio, CTAInstagram, mapa CTA_BY_OBJECTIVE e constantes de headline"
    },
    {
      "priority": "ALTA",
      "action": "Corrigir localização de callback no plano",
      "details": "Atualizar Fase 1.4 para modificar app/agent.py:122 em vez de app/callbacks/collect_code_snippets.py"
    },
    {
      "priority": "MÉDIA",
      "action": "Validar plano atualizado antes de implementar",
      "details": "Após resolver bloqueadores, re-executar plan-code-validator para confirmar 0 P0s"
    },
    {
      "priority": "MÉDIA",
      "action": "Considerar extrair schemas existentes",
      "details": "AdVisual, AdItem, Feedback (agent.py) podem ser movidos para módulo compartilhado conforme plano menciona"
    }
  ],
  "next_steps": [
    {
      "step": 1,
      "action": "Criar enums em format_specifications.py",
      "tasks": [
        "AspectRatio(str, Enum) com valores 9:16, 1:1, 4:5, 16:9",
        "CTAInstagram(str, Enum) com CTAs do Instagram Ads",
        "Exportar em __all__"
      ]
    },
    {
      "step": 2,
      "action": "Criar CTA_BY_OBJECTIVE",
      "tasks": [
        "Definir Dict[str, List[str]] mapeando objetivos a CTAs",
        "Consolidar com cta_preferencial de FORMAT_SPECS",
        "Usar valores do enum CTAInstagram"
      ]
    },
    {
      "step": 3,
      "action": "Resolver constantes de headline",
      "tasks": [
        "Adicionar min_headline_length e max_headline_length a config.py OU",
        "Atualizar plano para usar valores hardcoded/FORMAT_SPECS"
      ]
    },
    {
      "step": 4,
      "action": "Corrigir plano Fase 1.4",
      "tasks": [
        "Atualizar para modificar app/agent.py:122",
        "Remover referência a app/callbacks/collect_code_snippets.py inexistente"
      ]
    },
    {
      "step": 5,
      "action": "Re-validar plano",
      "tasks": [
        "Executar plan-code-validator novamente",
        "Confirmar 0 P0 blockers",
        "Aprovar para implementação"
      ]
    }
  ]
}
