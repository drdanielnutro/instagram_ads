{
  "task_id": "TASK-20251015-0000",
  "requirements": {
    "checklist_analysis_file": ".claude/results/checklist-output.json",
    "explicit_requirements": [
      "Criar AdVariationsPayload com variations: conlist(StrictAdItem, min_length=3, max_length=3)",
      "Criar ReferenceAssetPublic (sem signed_url) baseado em ReferenceImageMetadata",
      "Estender StrictAdVisual para incluir reference_assets: dict[str, ReferenceAssetPublic] | None",
      "Adicionar output_schema=AdVariationsPayload ao final_assembler_llm",
      "Atualizar final_assembler_instruction citando schema explicitamente",
      "Refatorar FinalAssemblyNormalizer para dual-write (final_ad_variations objeto + final_code_delivery string)",
      "Implementar injeção de reference_assets convertendo ReferenceImageMetadata → ReferenceAssetPublic",
      "Simplificar FinalDeliveryValidatorAgent removendo validações estruturais",
      "Criar testes unitários para schemas e normalizer",
      "Atualizar testes de integração existentes",
      "Atualizar documentação (CORRECAO_VALIDACAO_DETERMINISTICA.md, changelog, README)"
    ],
    "implicit_requirements": [
      "Manter compatibilidade com fluxo fallback StoryBrand",
      "Preservar telemetria (delivery_audit_trail) e métricas",
      "Não quebrar endpoints GET /final/meta e GET /final/download",
      "Garantir conversão remove signed_url",
      "Manter compatibilidade com persist_final_delivery",
      "Usar CTAs de CTA_INSTAGRAM_CHOICES em app/config.py:12",
      "Usar FORMAT_SPECS de app/format_specifications.py"
    ],
    "acceptance_criteria": [
      "AdVariationsPayload valida exatamente 3 variações",
      "ReferenceAssetPublic sem campo signed_url",
      "final_assembler_llm retorna objeto em state[final_ad_variations]",
      "state[final_code_delivery] mantido como string (dual-write)",
      "reference_assets injetados quando state[reference_images] presente",
      "FinalDeliveryValidatorAgent valida apenas: contagem, duplicatas, CTA × objetivo",
      "Validações estruturais delegadas ao Pydantic",
      "pytest --cov ≥ 80%",
      "Pipeline determinístico executa sem bloqueios",
      "Documentação reflete nova arquitetura"
    ]
  },
  "expected_outputs": {
    "files_to_create": [
      "tests/unit/schemas/test_final_delivery_schemas.py",
      "tests/unit/schemas/test_reference_asset_public.py"
    ],
    "files_to_modify": [
      "app/schemas/final_delivery.py",
      "app/schemas/reference_assets.py",
      "app/agent.py",
      "app/validators/final_delivery_validator.py",
      "tests/unit/validators/test_final_delivery_validator.py",
      "tests/integration/pipeline/test_deterministic_flow.py",
      "docs/ja_implementado/CORRECAO_VALIDACAO_DETERMINISTICA.md"
    ],
    "files_to_delete": [],
    "tests_to_create": [
      "tests/unit/schemas/test_final_delivery_schemas.py - validar AdVariationsPayload, StrictAdItem, min/max variações",
      "tests/unit/schemas/test_reference_asset_public.py - validar conversão ReferenceImageMetadata → ReferenceAssetPublic",
      "Atualizar tests/unit/validators/test_final_delivery_validator.py - refletir escopo simplificado",
      "Atualizar tests/integration/pipeline/test_deterministic_flow.py - validar dual-write e injeção reference_assets"
    ]
  },
  "testing_requirements": {
    "coverage_target": 80,
    "test_types": [
      "unit",
      "integration"
    ],
    "test_strategy": "Fase 1: testes unitários de schemas (AdVariationsPayload, ReferenceAssetPublic); Fase 2: testes de normalizer (dual-write, injeção); Fase 3: testes de validador simplificado; Fase 4: testes de integração do pipeline completo"
  },
  "project_context": "Sistema multiagente ADK que gera anúncios Instagram em JSON. Pipeline: snippets → final_assembler_llm → FinalAssemblyNormalizer → FinalDeliveryValidatorAgent → persistência. CTAs em app/config.py:12, formatos em app/format_specifications.py. Flag ENABLE_DETERMINISTIC_FINAL_VALIDATION=true em app/.env:63.",
  "critical_notes": [
    "final_assembler_llm NÃO usa tools/transfers (compatível com output_schema)",
    "Dual-write temporário até migração completa (1-2 sprints)",
    "Schemas devem usar Literal para CTAs, formatos, aspect_ratios baseados em config existente",
    "ReferenceAssetPublic DEVE remover signed_url de ReferenceImageMetadata",
    "Manter compatibilidade com fallback StoryBrand (FallbackStorybrandCompiler, PersistStorybrandSectionsAgent)"
  ]
}
