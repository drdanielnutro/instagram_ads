#!/usr/bin/env python3
"""
Teste direto do StoryBrandExtractor com LangExtract
Executa extra√ß√£o de elementos StoryBrand de uma p√°gina HTML de exemplo
"""

import os
import sys
import json
from pathlib import Path

# Adicionar o diret√≥rio app ao path
sys.path.insert(0, str(Path(__file__).parent / 'app'))

# Importar o extrator
from tools.langextract_sb7 import StoryBrandExtractor

def test_with_example_html():
    """Testa com HTML de exemplo embutido"""

    # HTML de exemplo de uma landing page fict√≠cia
    example_html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Transforme seu Neg√≥cio Digital - Ag√™ncia Growth</title>
        <meta name="description" content="Ajudamos empres√°rios a escalar suas vendas online">
    </head>
    <body>
        <header>
            <h1>Seu neg√≥cio est√° perdendo vendas online?</h1>
            <p>Sabemos como √© frustrante ver concorrentes vendendo mais enquanto voc√™ luta para conseguir clientes.</p>
        </header>

        <section class="problema">
            <h2>O Problema que Voc√™ Enfrenta</h2>
            <p>Voc√™ trabalha duro mas n√£o consegue converter visitantes em clientes.</p>
            <p>Se sente perdido com tantas estrat√©gias de marketing que n√£o funcionam.</p>
            <p>√â injusto que empresas menores estejam crescendo mais r√°pido que a sua.</p>
        </section>

        <section class="sobre">
            <h2>Por que Somos Diferentes</h2>
            <p>Com 10 anos de experi√™ncia, j√° ajudamos mais de 500 empresas a triplicar suas vendas.</p>
            <p>Entendemos sua frustra√ß√£o porque j√° passamos por isso.</p>
            <div class="testimonial">
                "A Ag√™ncia Growth transformou nosso neg√≥cio. Triplicamos o faturamento em 6 meses!" - Jo√£o Silva, CEO TechStart
            </div>
        </section>

        <section class="plano">
            <h2>Nosso Plano Simples de 3 Passos</h2>
            <ol>
                <li>An√°lise gratuita do seu neg√≥cio digital</li>
                <li>Estrat√©gia personalizada de crescimento</li>
                <li>Implementa√ß√£o com acompanhamento semanal</li>
            </ol>
        </section>

        <section class="cta">
            <button class="primary">Agende Sua Consulta Gratuita Agora</button>
            <a href="/ebook" class="secondary">Baixe nosso guia gratuito de vendas online</a>
        </section>

        <section class="urgencia">
            <h2>N√£o Deixe Para Depois</h2>
            <p>Cada dia sem uma estrat√©gia digital √© dinheiro perdido.</p>
            <p>Seus concorrentes n√£o v√£o esperar voc√™ decidir.</p>
        </section>

        <section class="transformacao">
            <h2>Imagine Seu Neg√≥cio Daqui a 6 Meses</h2>
            <p>Vendas autom√°ticas acontecendo 24/7</p>
            <p>Clientes chegando sem voc√™ precisar prospectar</p>
            <p>Liberdade para focar no que voc√™ ama fazer</p>
        </section>
    </body>
    </html>
    """

    print("=" * 60)
    print("TESTE DO STORYBRAND EXTRACTOR COM LANGEXTRACT")
    print("=" * 60)

    # Configurar para usar Vertex AI
    use_vertex = os.getenv("GOOGLE_GENAI_USE_VERTEXAI", "").lower() == "true"

    if use_vertex:
        print("\nüå©Ô∏è  Usando Vertex AI")
        print(f"   Projeto: {os.getenv('GOOGLE_CLOUD_PROJECT', 'n√£o configurado')}")
        print(f"   Regi√£o: {os.getenv('GOOGLE_CLOUD_LOCATION', 'n√£o configurado')}")

        # Verificar se ADC est√° configurado
        import subprocess
        try:
            result = subprocess.run(
                ["gcloud", "auth", "application-default", "print-access-token"],
                capture_output=True, text=True, timeout=10
            )
            if result.returncode == 0:
                print("‚úÖ Application Default Credentials configurado")
                api_key = None  # Vertex AI n√£o usa API key
            else:
                print("‚ùå ADC n√£o configurado. Execute: gcloud auth application-default login")
                print(f"   Erro: {result.stderr}")
                return
        except subprocess.TimeoutExpired:
            # Se demorou, provavelmente est√° funcionando mas lento
            print("‚ö†Ô∏è  Verifica√ß√£o ADC demorou, mas provavelmente est√° configurado")
            print("   Tentando continuar...")
            api_key = None
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro ao verificar ADC: {e}")
            # Tentar continuar mesmo assim
            print("   Tentando continuar...")
            api_key = None
    else:
        # Verificar API key para Gemini direto
        api_key = os.getenv("LANGEXTRACT_API_KEY") or os.getenv("GOOGLE_GENAI_API_KEY")
        if not api_key:
            print("\n‚ö†Ô∏è  AVISO: Nenhuma API key encontrada!")
            print("Configure uma das seguintes vari√°veis de ambiente:")
            print("  - LANGEXTRACT_API_KEY")
            print("  - GOOGLE_GENAI_API_KEY")
            print("\nPara configurar temporariamente:")
            print("  export GOOGLE_GENAI_API_KEY='sua-chave-aqui'")
            return

        print(f"\n‚úÖ API Key configurada: {api_key[:10]}...")

    try:
        # Criar inst√¢ncia do extrator
        print("\nüì¶ Inicializando StoryBrandExtractor...")
        extractor = StoryBrandExtractor(
            model_id="gemini-2.5-flash-lite",  # Usando gemini 2.5 flash lite
            api_key=api_key
        )
        print("‚úÖ Extrator inicializado com sucesso")

        # Executar extra√ß√£o
        print("\nüîç Iniciando extra√ß√£o dos elementos StoryBrand...")
        print("   (isso pode levar alguns segundos...)")

        result = extractor.extract(example_html)

        # Exibir resultados
        print("\n" + "=" * 60)
        print("RESULTADOS DA EXTRA√á√ÉO")
        print("=" * 60)

        # Score de completude
        score = result.get('completeness_score', 0)
        print(f"\nüìä Score de Completude: {score:.0%}")
        print(f"   Elementos encontrados: {len(result.get('metadata', {}).get('elements_found', []))}/7")

        # 1. Character (Personagem)
        print("\n1Ô∏è‚É£ CHARACTER (Cliente Ideal):")
        character = result.get('character', {})
        if character.get('description'):
            print(f"   Descri√ß√£o: {character['description']}")
            if character.get('evidence'):
                print(f"   Evid√™ncia: '{character['evidence'][0]}'")
            print(f"   Confian√ßa: {character.get('confidence', 0):.0%}")
        else:
            print("   ‚ùå N√£o encontrado")

        # 2. Problem (Problema)
        print("\n2Ô∏è‚É£ PROBLEM (Problemas):")
        problem = result.get('problem', {})
        types = problem.get('types', {})
        if types.get('external'):
            print(f"   Externo: {types['external']}")
        if types.get('internal'):
            print(f"   Interno: {types['internal']}")
        if types.get('philosophical'):
            print(f"   Filos√≥fico: {types['philosophical']}")
        if not any(types.values()):
            print("   ‚ùå N√£o encontrado")

        # 3. Guide (Guia)
        print("\n3Ô∏è‚É£ GUIDE (Marca como Guia):")
        guide = result.get('guide', {})
        if guide.get('authority'):
            print(f"   Autoridade: {guide['authority']}")
        if guide.get('empathy'):
            print(f"   Empatia: {guide['empathy']}")
        if not (guide.get('authority') or guide.get('empathy')):
            print("   ‚ùå N√£o encontrado")

        # 4. Plan (Plano)
        print("\n4Ô∏è‚É£ PLAN (Plano de A√ß√£o):")
        plan = result.get('plan', {})
        if plan.get('steps'):
            print(f"   Passos encontrados: {len(plan['steps'])}")
            for i, step in enumerate(plan['steps'], 1):
                print(f"   {i}. {step}")
        else:
            print("   ‚ùå N√£o encontrado")

        # 5. Action (A√ß√£o)
        print("\n5Ô∏è‚É£ ACTION (Chamadas para A√ß√£o):")
        action = result.get('action', {})
        if action.get('primary'):
            print(f"   CTA Prim√°rio: {action['primary']}")
        if action.get('secondary'):
            print(f"   CTA Secund√°rio: {action['secondary']}")
        if not (action.get('primary') or action.get('secondary')):
            print("   ‚ùå N√£o encontrado")

        # 6. Failure (Fracasso)
        print("\n6Ô∏è‚É£ FAILURE (Consequ√™ncias de N√£o Agir):")
        failure = result.get('failure', {})
        if failure.get('consequences'):
            for cons in failure['consequences']:
                print(f"   - {cons}")
        else:
            print("   ‚ùå N√£o encontrado")

        # 7. Success (Sucesso)
        print("\n7Ô∏è‚É£ SUCCESS (Transforma√ß√£o):")
        success = result.get('success', {})
        if success.get('transformation'):
            print(f"   Transforma√ß√£o: {success['transformation']}")
        if success.get('benefits'):
            print(f"   Benef√≠cios:")
            for benefit in success['benefits']:
                print(f"   - {benefit}")
        if not (success.get('transformation') or success.get('benefits')):
            print("   ‚ùå N√£o encontrado")

        # Metadados
        print("\n" + "=" * 60)
        print("METADADOS")
        print("=" * 60)
        metadata = result.get('metadata', {})
        print(f"M√©todo: {metadata.get('extraction_method', 'unknown')}")
        print(f"Modelo: {metadata.get('model_used', 'unknown')}")
        print(f"Total de extra√ß√µes: {metadata.get('total_extractions', 0)}")

        # Salvar resultado completo
        output_file = Path(__file__).parent / 'test_langextract_result.json'
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)

        print(f"\nüíæ Resultado completo salvo em: {output_file}")

        # Tentar gerar visualiza√ß√£o HTML
        try:
            print("\nüé® Tentando gerar visualiza√ß√£o HTML...")
            html_file = extractor.save_visualization(result, str(Path(__file__).parent))
            if html_file:
                print(f"‚úÖ Visualiza√ß√£o salva em: {html_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è  N√£o foi poss√≠vel gerar visualiza√ß√£o: {e}")

        print("\n‚úÖ TESTE CONCLU√çDO COM SUCESSO!")

    except ImportError as e:
        print(f"\n‚ùå Erro de importa√ß√£o: {e}")
        print("\nVerifique se langextract est√° instalado:")
        print("  pip install langextract")

    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
        import traceback
        print("\nTraceback completo:")
        traceback.print_exc()


def test_with_url(url: str):
    """Testa com uma URL real"""

    print(f"\nüåê Testando com URL: {url}")

    try:
        # Importar web_fetch para obter HTML real
        from tools.web_fetch import web_fetch_tool
        from google.adk.context import ToolContext

        # Criar contexto mock
        context = ToolContext()

        # Buscar HTML
        print("üì• Baixando conte√∫do da p√°gina...")
        result = web_fetch_tool(url, context)

        if result['status'] != 'success':
            print(f"‚ùå Erro ao buscar URL: {result.get('error')}")
            return

        html_content = result['html_content']
        print(f"‚úÖ HTML obtido: {len(html_content)} caracteres")

        # Extrair StoryBrand
        api_key = os.getenv("LANGEXTRACT_API_KEY") or os.getenv("GOOGLE_GENAI_API_KEY")
        if not api_key:
            print("‚ùå API key n√£o configurada")
            return

        extractor = StoryBrandExtractor(api_key=api_key)
        print("\nüîç Extraindo elementos StoryBrand...")

        sb_result = extractor.extract(html_content)

        # Mostrar resultados resumidos
        print(f"\nüìä Score: {sb_result['completeness_score']:.0%}")
        print(f"Elementos encontrados: {', '.join(sb_result['metadata']['elements_found'])}")

    except Exception as e:
        print(f"‚ùå Erro: {e}")


if __name__ == "__main__":
    import sys

    if len(sys.argv) > 1:
        # Se passou URL como argumento
        test_with_url(sys.argv[1])
    else:
        # Teste com HTML de exemplo
        test_with_example_html()

        print("\n" + "=" * 60)
        print("üí° DICA: Voc√™ tamb√©m pode testar com uma URL real:")
        print(f"   python {sys.argv[0]} https://exemplo.com")
        print("=" * 60)